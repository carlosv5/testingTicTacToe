node {
 stage ('Checkout') {
    IP = sh(returnStdout: true, script: "docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' codeurjc-forge-gerrit").trim()
    git url: "http://" + IP + ":8080/TicTacToe"
 }
 stage ('Unit and System test') {
     docker.image('maven:3-jdk-8-alpine').inside('-v $HOME/.m2:/root/.m2 '
     +'-v /var/run/docker.sock:/var/run/docker.sock') {
        sh 'rm target/*.flv || true'
        sh 'mvn -Dmaven.test.failure.ignore=true -Dtest=BoardParametrizedTest,TicTacToeGameTest,WebAppSeleniumSystemTest test'     }
     step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
        archiveArtifacts artifacts: 'target/*.flv'
 }
 stage ('Sonar') {
     docker.image('maven:3-jdk-8-alpine').inside('-v $HOME/.m2:/root/.m2 ' + '--network=ci-network --link codeurjc-forge-sonarqube:sonarqube '
     +'-v /var/run/docker.sock:/var/run/docker.sock') {
        sh 'mvn sonar:sonar -Dsonar.jdbc.url=jdbc:h2:tcp://sonarqube:9092/sonar -Dsonar.host.url=http://sonarqube:9000'
     }
 }
 stage ('Create Docker image') {
    sh 'docker build --build-arg GIT_COMMIT=$(git log -1 --format=%h) -t tictactoe Jenkins/.'
    //sh 'docker images'
 }
 stage ('Push Docker image to DockerHub') {
     //sh 'docker tag testingupmforge/TicTacToe:latest testingupmforge/TicTacToe:dev'
     //sh 'docker login -u="testingupmforge" -p="carl*sys3rgi*123"'
     //sh 'docker push testingupmforge/TicTacToe:dev'
 }
}
